// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id     Int     @id @default(autoincrement())
  name   String?
  room   Room    @relation(fields: [roomId], references: [id])
  roomId Int
}

model Room {
  id    Int    @id @default(autoincrement())
  users User[]
  count Int    @default(0)
}

model Code {
  id     Int    @id @default(autoincrement())
  number String
}

// Thought process: A User belongs to ONE room, a room can have MANY users. A room contains a count this count will increment upon click/action
// The room count will directly correspond to a codes ID. The Code model will be sorted by most frequently used to least frequently used
// As the room count increments the call to action will return a less frequently used code by directly calling it's id. Code[0] would be most frequent
// and code[10000] would be the least frequently used code. By storing the count in the Room model inside of the database my belief is this will ensure
// no code gets repeated until the count is reset or the room has ran out of codes to use. Once the Code model is seeded it's never edited again.
// It was either this or each room gets a newly generated list of 10000 codes with a boolean if it has been used or not
// OR.... filter through 100000 codes to make sure the one given next is not one thats already used. Time complexity would get tricky there.
